// datasource db defines the database connection settings.
// It is configured for PostgreSQL and uses an environment variable for the connection URL.
// The 'extensions' feature enables the use of PostgreSQL-specific data types.
datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
}

// generator db configures Prisma Client settings.
// It is set up to use Prisma Client Python with asyncio interface and specific features.
generator db {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
  previewFeatures      = ["postgresqlExtensions"]
}

model User {
  id           String        @id @default(dbgenerated("gen_random_uuid()"))
  email        String        @unique
  password     String
  role         Role          @default(CONSUMER)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Videos       Video[]
  AuthSessions AuthSession[]
  VideoViews   VideoView[]
}

model AuthSession {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  validTill DateTime
}

model Video {
  id          String      @id @default(dbgenerated("gen_random_uuid()"))
  title       String
  description String?
  url         String
  secureUrl   String
  allowed     Boolean     @default(false)
  creatorId   String
  creator     User        @relation(fields: [creatorId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  VideoViews  VideoView[]
  Analytics   Analytics[]
}

model VideoView {
  id       String   @id @default(dbgenerated("gen_random_uuid()"))
  videoId  String
  video    Video    @relation(fields: [videoId], references: [id])
  userId   String
  user     User     @relation(fields: [userId], references: [id])
  viewedAt DateTime @default(now())
}

model Analytics {
  id            String   @id @default(dbgenerated("gen_random_uuid()"))
  videoId       String
  video         Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  viewCount     Int      @default(0)
  uniqueViewers Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([videoId])
}

enum Role {
  CONSUMER
  CREATOR
  ADMIN
}

